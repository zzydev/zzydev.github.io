<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>easy on 人类低质量男性求职准备</title>
    <link>https://zzydev.top/tags/easy/</link>
    <description>Recent content in easy on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Fri, 03 Jun 2022 22:43:47 +0800</lastBuildDate><atom:link href="https://zzydev.top/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc21_合并两个有序链表</title>
      <link>https://zzydev.top/posts/leetcode/lc21_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 03 Jun 2022 22:43:47 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc21_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>原题链接 模拟merge sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() :</description>
    </item>
    
    <item>
      <title>Lc20_有效的括号</title>
      <link>https://zzydev.top/posts/leetcode/lc20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Fri, 03 Jun 2022 22:36:39 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>原题链接 题解： 这里给出数组中的括号不全是一样的，所以遍历数组，如果遇到括号 &amp;ldquo;(&amp;rdquo; 、 &amp;ldquo;[&amp;quot;、 &amp;ldquo;{&amp;rdquo; 就放入栈中。 如果不是&amp;rdqu</description>
    </item>
    
    <item>
      <title>Lc14_最长公共前缀</title>
      <link>https://zzydev.top/posts/leetcode/lc14_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link>
      <pubDate>Thu, 02 Jun 2022 23:37:28 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc14_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid>
      <description>语法题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public: string longestCommonPrefix(vector&amp;lt;string&amp;gt;&amp;amp; strs) { string res; if (strs.empty()) return res; for (int i = 0;; i ++ ) { if (i &amp;gt;= strs[0].size()) return res; char c = strs[0][i]; for (auto&amp;amp; str: strs) if (str.size() &amp;lt;= i || str[i] != c) return res; res +=</description>
    </item>
    
    <item>
      <title>Lc13_罗马数字转整数</title>
      <link>https://zzydev.top/posts/leetcode/lc13_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Thu, 02 Jun 2022 23:35:11 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc13_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>定义字母（罗马数字）到数字（阿拉伯数字）的映射。 从前往后扫描，如果发现 s[i+1]的数字比 s[i] 的数字大，那么减去 s[i]的值即可，否则直接累计</description>
    </item>
    
    <item>
      <title>Lc09_回文数</title>
      <link>https://zzydev.top/posts/leetcode/lc09_%E5%9B%9E%E6%96%87%E6%95%B0/</link>
      <pubDate>Thu, 02 Jun 2022 22:41:35 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc09_%E5%9B%9E%E6%96%87%E6%95%B0/</guid>
      <description>解法一 1 2 3 4 5 6 7 8 9 class Solution { public: bool isPalindrome(int x) { string t = to_string(x); auto res = t; reverse(t.begin(), t.end()); return res == t; } }; 解法二 如果负数直接返回 false， 比较正序逆序数字是否一样 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Lc07_整数反转</title>
      <link>https://zzydev.top/posts/leetcode/lc07_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Thu, 02 Jun 2022 19:08:33 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc07_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: int reverse(int x) { int res = 0; while (x) { if (x &amp;gt; 0 &amp;amp;&amp;amp; res &amp;gt; (INT_MAX - x % 10) / 10) return 0; if (x &amp;lt; 0 &amp;amp;&amp;amp; res &amp;lt; (INT_MIN - x % 10) / 10) return 0; res = res * 10 + x % 10; x</description>
    </item>
    
    <item>
      <title>Lc01_两数之和</title>
      <link>https://zzydev.top/posts/leetcode/lc01_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 01 Jun 2022 07:40:45 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc01_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>使用 C++中的哈希表——unordered_map&amp;lt;int, int&amp;gt; 循环一遍 nums 数组，在每步循环中我们判断 target - nums[i] 是否在哈希表中 ： 如果是就找到和</description>
    </item>
    
  </channel>
</rss>
