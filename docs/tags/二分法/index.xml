<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>二分法 on 人类低质量男性求职准备</title>
    <link>https://zzydev.top/tags/%E4%BA%8C%E5%88%86%E6%B3%95/</link>
    <description>Recent content in 二分法 on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Mon, 06 Jun 2022 16:53:58 +0800</lastBuildDate><atom:link href="https://zzydev.top/tags/%E4%BA%8C%E5%88%86%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc35_搜索插入位置</title>
      <link>https://zzydev.top/posts/leetcode/lc35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 06 Jun 2022 16:53:58 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: int searchInsert(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int n = nums.size(); int l = 0, r = n; while (l &amp;lt; r) { int mid = l + ((r - l) &amp;gt;&amp;gt; 1); if (nums[mid] &amp;lt; target) l = mid + 1; else r = mid; } return l; }</description>
    </item>
    
    <item>
      <title>Lc34_在排序数组中查找元素的第一个和最后一个位置</title>
      <link>https://zzydev.top/posts/leetcode/lc34_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 06 Jun 2022 16:38:41 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc34_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</guid>
      <description>原题链接 模板题： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public: vector&amp;lt;int&amp;gt; searchRange(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int n = nums.size(); int l = lowerBound(nums, n, target); int r = upperBound(nums, n,</description>
    </item>
    
    <item>
      <title>Lc33_搜索旋转排序数组</title>
      <link>https://zzydev.top/posts/leetcode/lc33_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 06 Jun 2022 16:29:24 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc33_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>原题链接</description>
    </item>
    
  </channel>
</rss>
