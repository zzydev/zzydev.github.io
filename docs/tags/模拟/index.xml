<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>模拟 on 人类低质量男性求职准备</title>
    <link>https://zzydev.top/tags/%E6%A8%A1%E6%8B%9F/</link>
    <description>Recent content in 模拟 on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Mon, 06 Jun 2022 17:47:37 +0800</lastBuildDate><atom:link href="https://zzydev.top/tags/%E6%A8%A1%E6%8B%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc38_外观数列</title>
      <link>https://zzydev.top/posts/leetcode/lc38_%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</link>
      <pubDate>Mon, 06 Jun 2022 17:47:37 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc38_%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public: string countAndSay(int n) { string res = &amp;#34;1&amp;#34;; for (int i = 0 ;i &amp;lt; n - 1; i ++) { string t = &amp;#34;&amp;#34;; for (int j = 0; j &amp;lt; res.size();) { int k = j + 1; while (k &amp;lt; res.size() &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>Lc36_有效的数独</title>
      <link>https://zzydev.top/posts/leetcode/lc36_%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Mon, 06 Jun 2022 17:16:25 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc36_%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public: bool isValidSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { bool st[9]; // 判断行 for(int i = 0; i &amp;lt; 9; i</description>
    </item>
    
    <item>
      <title>Lc09_回文数</title>
      <link>https://zzydev.top/posts/leetcode/lc09_%E5%9B%9E%E6%96%87%E6%95%B0/</link>
      <pubDate>Thu, 02 Jun 2022 22:41:35 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc09_%E5%9B%9E%E6%96%87%E6%95%B0/</guid>
      <description>解法一 1 2 3 4 5 6 7 8 9 class Solution { public: bool isPalindrome(int x) { string t = to_string(x); auto res = t; reverse(t.begin(), t.end()); return res == t; } }; 解法二 如果负数直接返回 false， 比较正序逆序数字是否一样 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Lc08_字符串转换整数(aoti)</title>
      <link>https://zzydev.top/posts/leetcode/lc08_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0aoti/</link>
      <pubDate>Thu, 02 Jun 2022 22:30:37 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc08_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0aoti/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: int myAtoi(string s) { int k = 0; while (k &amp;lt; s.size() &amp;amp;&amp;amp; s[k] == &amp;#39; &amp;#39;) k ++; //去除前导空格 if (k == s.size()) return 0; int minus = 1; if (s[k] == &amp;#39;-&amp;#39;)</description>
    </item>
    
  </channel>
</rss>
