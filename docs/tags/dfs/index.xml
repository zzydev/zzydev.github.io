<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dfs on 人类低质量男性求职准备</title>
    <link>https://zzydev.top/tags/dfs/</link>
    <description>Recent content in dfs on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Tue, 07 Jun 2022 17:33:00 +0800</lastBuildDate><atom:link href="https://zzydev.top/tags/dfs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc40_组合总和II</title>
      <link>https://zzydev.top/posts/leetcode/lc40_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8Cii/</link>
      <pubDate>Tue, 07 Jun 2022 17:33:00 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc40_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8Cii/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans; vector&amp;lt;int&amp;gt; path; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum2(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { sort(candidates.begin(), candidates.end()); dfs(candidates, 0, target); return ans; } void dfs(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int u, int target) { if (target == 0) ans.push_back(path); for (int i = u; i &amp;lt; candidates.size(); i</description>
    </item>
    
    <item>
      <title>Lc39_组合总和</title>
      <link>https://zzydev.top/posts/leetcode/lc39_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Tue, 07 Jun 2022 17:14:42 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc39_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; path; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { dfs(candidates, 0, target); return res; } void dfs(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int u, int target) { if (target == 0) res.push_back(path); for (int i = u; i &amp;lt; candidates.size() &amp;amp;&amp;amp; target - candidates[i] &amp;gt;= 0; i</description>
    </item>
    
    <item>
      <title>Lc37_解数独</title>
      <link>https://zzydev.top/posts/leetcode/lc37_%E8%A7%A3%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Mon, 06 Jun 2022 17:36:27 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc37_%E8%A7%A3%E6%95%B0%E7%8B%AC/</guid>
      <description>原题链接 回溯 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public: bool row[9][9], col[9][9], cell[3][3][9]; void solveSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { //先记录已经填了数字的 for (int i = 0; i</description>
    </item>
    
    <item>
      <title>Lc22_括号生成</title>
      <link>https://zzydev.top/posts/leetcode/lc22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</link>
      <pubDate>Fri, 03 Jun 2022 22:45:40 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</guid>
      <description>原题链接 左括号永远大于等于右括号 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: vector&amp;lt;string&amp;gt; res; vector&amp;lt;string&amp;gt; generateParenthesis(int n) { dfs(0, 0, n, &amp;#34;&amp;#34;); return res; } void dfs(int l, int r, int n, string path) { if (r == n) res.push_back(path); if (l &amp;lt; n) dfs(l + 1, r, n,</description>
    </item>
    
  </channel>
</rss>
