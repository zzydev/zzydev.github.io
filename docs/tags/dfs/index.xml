<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dfs on 人类低质量男性求职准备</title>
    <link>https://zzydev.top/tags/dfs/</link>
    <description>Recent content in dfs on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Fri, 03 Jun 2022 22:45:40 +0800</lastBuildDate><atom:link href="https://zzydev.top/tags/dfs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc22_括号生成</title>
      <link>https://zzydev.top/posts/leetcode/lc22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</link>
      <pubDate>Fri, 03 Jun 2022 22:45:40 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</guid>
      <description>原题链接 左括号永远大于等于右括号 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: vector&amp;lt;string&amp;gt; res; vector&amp;lt;string&amp;gt; generateParenthesis(int n) { dfs(0, 0, n, &amp;#34;&amp;#34;); return res; } void dfs(int l, int r, int n, string path) { if (r == n) res.push_back(path); if (l &amp;lt; n) dfs(l + 1, r, n,</description>
    </item>
    
    <item>
      <title>SetState到底是同步的还是异步的？</title>
      <link>https://zzydev.top/posts/headfirstreact/setstate%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 21:12:17 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/setstate%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public: vector&amp;lt;string&amp;gt; ans; string strs[10] = { &amp;#34;&amp;#34;,&amp;#34;&amp;#34;,&amp;#34;abc&amp;#34;,&amp;#34;def&amp;#34;, &amp;#34;ghi&amp;#34;,&amp;#34;jkl&amp;#34;,&amp;#34;mno&amp;#34;, &amp;#34;pqrs&amp;#34;,&amp;#34;tuv&amp;#34;,&amp;#34;wxyz&amp;#34; }; vector&amp;lt;string&amp;gt; letterCombinations(string digits) { if (digits.empty()) return ans; dfs(digits, 0, &amp;#34;&amp;#34;); return ans; } private: void dfs(string&amp;amp; digits, int u, string path) { if (u == digits.size()) ans.push_back(path); else { for (auto c</description>
    </item>
    
  </channel>
</rss>
