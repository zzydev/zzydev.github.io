<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>medium on 人类低质量男性求职准备</title>
    <link>https://zzydev.top/tags/medium/</link>
    <description>Recent content in medium on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Thu, 02 Jun 2022 23:13:10 +0800</lastBuildDate><atom:link href="https://zzydev.top/tags/medium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc12_整数转罗马数字</title>
      <link>https://zzydev.top/posts/leetcode/lc12_%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Thu, 02 Jun 2022 23:13:10 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc12_%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</guid>
      <description>罗马数字的计数方法： 相同的数字连写，所表示的数等于这些数字相加的和，如：III=3； 较小的数字在较大的数字的右边，所表示的数等于这些数字相加</description>
    </item>
    
    <item>
      <title>Lc08_字符串转换整数(aoti)</title>
      <link>https://zzydev.top/posts/leetcode/lc08_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0aoti/</link>
      <pubDate>Thu, 02 Jun 2022 22:30:37 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc08_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0aoti/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: int myAtoi(string s) { int k = 0; while (k &amp;lt; s.size() &amp;amp;&amp;amp; s[k] == &amp;#39; &amp;#39;) k ++; //去除前导空格 if (k == s.size()) return 0; int minus = 1; if (s[k] == &amp;#39;-&amp;#39;)</description>
    </item>
    
    <item>
      <title>Lc06_Z字形变换</title>
      <link>https://zzydev.top/posts/leetcode/lc06_z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Thu, 02 Jun 2022 19:05:15 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc06_z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid>
      <description>题解 题目要求**假设环境不允许存储 64 位整数（有符号或无符号）**所以只能使用 int 我们要保证 res * 10 + x % 10 不越界，那么有当 x &amp;gt; 0 时， res * 10 + x %</description>
    </item>
    
    <item>
      <title>Lc05_最长回文子串</title>
      <link>https://zzydev.top/posts/leetcode/lc05_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 02 Jun 2022 18:51:39 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc05_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>暴力枚举： 首先枚举回文串的中心 i，然后分两种情况向两边扩展边界，直到遇到不同字符为止。 分两种情况讨论： 回文串长度是奇数 如：&amp;ldquo;ba</description>
    </item>
    
    <item>
      <title>Lc03_无重复字符的最长子串</title>
      <link>https://zzydev.top/posts/leetcode/lc03_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 02 Jun 2022 18:33:15 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc03_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <description>双指针经典模板： class Solution { public: int lengthOfLongestSubstring(string s) { unordered_map&amp;lt;int, int&amp;gt; hash; int res = 0; for (int l = 0, r = 0; r &amp;lt; s.size(); r ++) { hash[s[r]] ++; while (hash[s[r]] &amp;gt; 1) hash[s[l ++]] --; if (res &amp;lt; r - l + 1) res = r - l + 1; } return res; } };</description>
    </item>
    
    <item>
      <title>Lc02_两数相加</title>
      <link>https://zzydev.top/posts/leetcode/lc02_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Thu, 02 Jun 2022 18:28:15 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc02_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>题解： 模拟加法过程： 举个 🌰：我们计算 abc + efg，我们应该先计算 c + g 如果结果大于等于 10 则进 1，然后继续计算 b + f 再加上之前的 进位 。 也就是说，</description>
    </item>
    
  </channel>
</rss>
