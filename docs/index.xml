<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>人类低质量男性求职准备</title>
    <link>https://zzydev.top/</link>
    <description>Recent content on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>zzydev</copyright>
    <lastBuildDate>Tue, 07 Jun 2022 17:36:53 +0800</lastBuildDate><atom:link href="https://zzydev.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lc41_缺失的第一个正数</title>
      <link>https://zzydev.top/posts/leetcode/lc41_%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</link>
      <pubDate>Tue, 07 Jun 2022 17:36:53 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc41_%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public: int firstMissingPositive(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); if (!n) return 1; // 最小正整数 做一次映射 结果加回来 for (auto&amp;amp; x : nums) if (x != INT_MIN) x -- ;</description>
    </item>
    
    <item>
      <title>Lc40_组合总和II</title>
      <link>https://zzydev.top/posts/leetcode/lc40_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8Cii/</link>
      <pubDate>Tue, 07 Jun 2022 17:33:00 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc40_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8Cii/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans; vector&amp;lt;int&amp;gt; path; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum2(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { sort(candidates.begin(), candidates.end()); dfs(candidates, 0, target); return ans; } void dfs(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int u, int target) { if (target == 0) ans.push_back(path); for (int i = u; i &amp;lt; candidates.size(); i</description>
    </item>
    
    <item>
      <title>Lc39_组合总和</title>
      <link>https://zzydev.top/posts/leetcode/lc39_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Tue, 07 Jun 2022 17:14:42 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc39_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; path; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; combinationSum(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int target) { dfs(candidates, 0, target); return res; } void dfs(vector&amp;lt;int&amp;gt;&amp;amp; candidates, int u, int target) { if (target == 0) res.push_back(path); for (int i = u; i &amp;lt; candidates.size() &amp;amp;&amp;amp; target - candidates[i] &amp;gt;= 0; i</description>
    </item>
    
    <item>
      <title>9.如何理解Fiber架构的迭代动机与设计思想</title>
      <link>https://zzydev.top/posts/headfirstreact/9_%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3fiber%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%8A%A8%E6%9C%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link>
      <pubDate>Mon, 06 Jun 2022 19:15:48 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/9_%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3fiber%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%8A%A8%E6%9C%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</guid>
      <description>前置知识：单线程的 JavaScript 与多线程的浏览器 JavaScript 线程和渲染线程必须是互斥的：这两个线程不能够穿插执行，必须串行。当其中一个线程执行时，另一个线程只能挂</description>
    </item>
    
    <item>
      <title>Lc38_外观数列</title>
      <link>https://zzydev.top/posts/leetcode/lc38_%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</link>
      <pubDate>Mon, 06 Jun 2022 17:47:37 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc38_%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public: string countAndSay(int n) { string res = &amp;#34;1&amp;#34;; for (int i = 0 ;i &amp;lt; n - 1; i ++) { string t = &amp;#34;&amp;#34;; for (int j = 0; j &amp;lt; res.size();) { int k = j + 1; while (k &amp;lt; res.size() &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>Lc37_解数独</title>
      <link>https://zzydev.top/posts/leetcode/lc37_%E8%A7%A3%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Mon, 06 Jun 2022 17:36:27 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc37_%E8%A7%A3%E6%95%B0%E7%8B%AC/</guid>
      <description>原题链接 回溯 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public: bool row[9][9], col[9][9], cell[3][3][9]; void solveSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { //先记录已经填了数字的 for (int i = 0; i</description>
    </item>
    
    <item>
      <title>Lc36_有效的数独</title>
      <link>https://zzydev.top/posts/leetcode/lc36_%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Mon, 06 Jun 2022 17:16:25 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc36_%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public: bool isValidSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { bool st[9]; // 判断行 for(int i = 0; i &amp;lt; 9; i</description>
    </item>
    
    <item>
      <title>Lc35_搜索插入位置</title>
      <link>https://zzydev.top/posts/leetcode/lc35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 06 Jun 2022 16:53:58 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc35_%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: int searchInsert(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int n = nums.size(); int l = 0, r = n; while (l &amp;lt; r) { int mid = l + ((r - l) &amp;gt;&amp;gt; 1); if (nums[mid] &amp;lt; target) l = mid + 1; else r = mid; } return l; }</description>
    </item>
    
    <item>
      <title>Lc34_在排序数组中查找元素的第一个和最后一个位置</title>
      <link>https://zzydev.top/posts/leetcode/lc34_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 06 Jun 2022 16:38:41 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc34_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</guid>
      <description>原题链接 模板题： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public: vector&amp;lt;int&amp;gt; searchRange(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int n = nums.size(); int l = lowerBound(nums, n, target); int r = upperBound(nums, n,</description>
    </item>
    
    <item>
      <title>Lc33_搜索旋转排序数组</title>
      <link>https://zzydev.top/posts/leetcode/lc33_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 06 Jun 2022 16:29:24 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc33_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>原题链接</description>
    </item>
    
    <item>
      <title>Lc32_最长有效括号</title>
      <link>https://zzydev.top/posts/leetcode/lc32_%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Mon, 06 Jun 2022 16:15:25 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc32_%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</guid>
      <description>原题链接 合法的括号序列： 左边的括号数量大于等于右边括号的数量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: int longestValidParentheses(string s) { int n = s.size(); if (n &amp;lt;</description>
    </item>
    
    <item>
      <title>Lc31_下一个排列</title>
      <link>https://zzydev.top/posts/leetcode/lc31_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Mon, 06 Jun 2022 15:38:55 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc31_%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>原题链接 解题思路： 先找到第一个降序的位置k，如果k为0，也就是整个数组是降序的，直接翻转整个数组。 找到第一个比nums[k - 1]小的数 nums[t - 1</description>
    </item>
    
    <item>
      <title>Lc30_串联所有单词的子串</title>
      <link>https://zzydev.top/posts/leetcode/lc30_%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Mon, 06 Jun 2022 15:38:06 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc30_%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/</guid>
      <description>原题链接</description>
    </item>
    
    <item>
      <title>Lc29_两数相除</title>
      <link>https://zzydev.top/posts/leetcode/lc29_%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Mon, 06 Jun 2022 15:23:27 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc29_%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: int divide(int dividend, int divisor) { typedef long long LL; vector&amp;lt;LL&amp;gt; exp; LL res = 0; bool is_minus = false; if (dividend &amp;gt; 0 ^ divisor &amp;gt; 0) is_minus = true; LL x = abs((LL) dividend), y =</description>
    </item>
    
    <item>
      <title>Lc28_实现strStr</title>
      <link>https://zzydev.top/posts/leetcode/lc28_%E5%AE%9E%E7%8E%B0strstr/</link>
      <pubDate>Mon, 06 Jun 2022 15:22:54 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc28_%E5%AE%9E%E7%8E%B0strstr/</guid>
      <description>原题链接</description>
    </item>
    
    <item>
      <title>Lc27_移除元素</title>
      <link>https://zzydev.top/posts/leetcode/lc27_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Mon, 06 Jun 2022 15:18:49 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc27_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public: int removeElement(vector&amp;lt;int&amp;gt;&amp;amp; nums, int val) { int k = 0; for (int i = 0; i &amp;lt; nums.size(); i ++) { if (nums[i] != val) { nums[k ++] = nums[i]; } } return k; } };</description>
    </item>
    
    <item>
      <title>Lc26_删除有序数组中的重复项</title>
      <link>https://zzydev.top/posts/leetcode/lc26_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Mon, 06 Jun 2022 15:11:02 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc26_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 class Solution { public: int removeDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int k = 0; for (int i = 0; i &amp;lt; nums.size(); i ++) { if (!i || nums[i] != nums[i - 1]) nums[k ++] = nums[i]; } return k; } };</description>
    </item>
    
    <item>
      <title>Lc25_K个一组翻转链表</title>
      <link>https://zzydev.top/posts/leetcode/lc25_k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 03 Jun 2022 22:53:33 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc25_k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>原题链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next)</description>
    </item>
    
    <item>
      <title>Lc24_两两交换链表中的节点</title>
      <link>https://zzydev.top/posts/leetcode/lc24_%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 03 Jun 2022 22:50:44 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc24_%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>原题链接 迭代以下过程： 创建虚拟头节点dummy，让 p 指针指向 dummy 让a指针指向p→next，让b指针指向a→next 让p指向a 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Lc23_合并K个升序链表</title>
      <link>https://zzydev.top/posts/leetcode/lc23_%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 03 Jun 2022 22:47:50 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc23_%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>原题链接 使用优先队列，将所有链表的头指针加入到优先队列中（小根堆） 当小根堆不为空时，每次将堆顶元素t放入新构建的链表中，再将t的下一个节点加</description>
    </item>
    
    <item>
      <title>Lc22_括号生成</title>
      <link>https://zzydev.top/posts/leetcode/lc22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</link>
      <pubDate>Fri, 03 Jun 2022 22:45:40 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc22_%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</guid>
      <description>原题链接 左括号永远大于等于右括号 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: vector&amp;lt;string&amp;gt; res; vector&amp;lt;string&amp;gt; generateParenthesis(int n) { dfs(0, 0, n, &amp;#34;&amp;#34;); return res; } void dfs(int l, int r, int n, string path) { if (r == n) res.push_back(path); if (l &amp;lt; n) dfs(l + 1, r, n,</description>
    </item>
    
    <item>
      <title>Lc21_合并两个有序链表</title>
      <link>https://zzydev.top/posts/leetcode/lc21_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 03 Jun 2022 22:43:47 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc21_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>原题链接 模拟merge sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() :</description>
    </item>
    
    <item>
      <title>Lc20_有效的括号</title>
      <link>https://zzydev.top/posts/leetcode/lc20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Fri, 03 Jun 2022 22:36:39 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>原题链接 题解： 这里给出数组中的括号不全是一样的，所以遍历数组，如果遇到括号 &amp;ldquo;(&amp;rdquo; 、 &amp;ldquo;[&amp;quot;、 &amp;ldquo;{&amp;rdquo; 就放入栈中。 如果不是&amp;rdqu</description>
    </item>
    
    <item>
      <title>Lc19_删除链表的倒数第N个结点</title>
      <link>https://zzydev.top/posts/leetcode/lc19_%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</link>
      <pubDate>Fri, 03 Jun 2022 22:30:45 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc19_%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</guid>
      <description>原题链接 解题思路： 先求出链表长度 求出要删除节点的位置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for singly-linked list. * struct ListNode { * int val; *</description>
    </item>
    
    <item>
      <title>Lc18_四数之和</title>
      <link>https://zzydev.top/posts/leetcode/lc18_%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 03 Jun 2022 22:24:59 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc18_%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; fourSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { sort(nums.begin(),nums.end()); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; for (int i = 0; i &amp;lt; nums.size(); i ++) { if (i &amp;amp;&amp;amp; nums[i] == nums[i - 1]) continue; for (int j = i + 1; j &amp;lt; nums.size(); j ++) { if (j &amp;gt;</description>
    </item>
    
    <item>
      <title>8.SetState到底是同步的还是异步的？</title>
      <link>https://zzydev.top/posts/headfirstreact/8_setstate%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 21:12:17 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/8_setstate%E5%88%B0%E5%BA%95%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84/</guid>
      <description>从一道面试题说起 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import React from &amp;#34;react&amp;#34;; import &amp;#34;./styles.css&amp;#34;; export default class</description>
    </item>
    
    <item>
      <title>7.React中的栈调和过程是怎样的？</title>
      <link>https://zzydev.top/posts/headfirstreact/7_react%E4%B8%AD%E7%9A%84%E6%A0%88%E8%B0%83%E5%92%8C%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 20:18:38 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/7_react%E4%B8%AD%E7%9A%84%E6%A0%88%E8%B0%83%E5%92%8C%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</guid>
      <description>调和（Reconciliation）过程与 Diff 算法 Virtual DOM 是一种编程概念。在这个概念里，UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中</description>
    </item>
    
    <item>
      <title>6.真正理解虚拟DOM,React选它是因为性能吗</title>
      <link>https://zzydev.top/posts/headfirstreact/6_%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9Fdomreact%E9%80%89%E5%AE%83%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%80%A7%E8%83%BD%E5%90%97/</link>
      <pubDate>Fri, 03 Jun 2022 19:55:46 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/6_%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9Fdomreact%E9%80%89%E5%AE%83%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%80%A7%E8%83%BD%E5%90%97/</guid>
      <description>React 中的虚拟 DOM 大致是如何工作的? 挂载阶段，React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射（触发渲染流水线）； 更新</description>
    </item>
    
    <item>
      <title>5.深入React Hooks工作机制,Hooks本质是链表</title>
      <link>https://zzydev.top/posts/headfirstreact/5_%E6%B7%B1%E5%85%A5react-hooks%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 03 Jun 2022 17:34:48 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/5_%E6%B7%B1%E5%85%A5react-hooks%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</guid>
      <description>React 团队面向开发者给出了两条 React-Hooks 的使用原则，原则的内容如下： 只在 React 函数中调用 Hook； 不要在循环、条件或嵌套函数中调用 Hook。 原则 2 中强调的所</description>
    </item>
    
    <item>
      <title>4.React Hooks设计动机与工作模式</title>
      <link>https://zzydev.top/posts/headfirstreact/4_react-hooks%E8%AE%BE%E8%AE%A1%E5%8A%A8%E6%9C%BA%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 03 Jun 2022 11:16:41 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/4_react-hooks%E8%AE%BE%E8%AE%A1%E5%8A%A8%E6%9C%BA%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</guid>
      <description>函数组件会捕获 render 内部的状态，这是两类组件最大的不同。 React 框架的主要工作，就是及时地把声明式的代码转换为命令式的 DOM 操作，把数据层面的描述映射到用</description>
    </item>
    
    <item>
      <title>3.数据是如何在React组件之间流动的？</title>
      <link>https://zzydev.top/posts/headfirstreact/3_%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8react%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E6%B5%81%E5%8A%A8%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 10:35:11 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/3_%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8react%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E6%B5%81%E5%8A%A8%E7%9A%84/</guid>
      <description>React 的核心特征是“数据驱动视图”，即 UI = render(data) 基于 props 的单向数据流 所谓单向数据流，指的就是当前组件的 state 以 props 的形式流动时，只能流向组件树中比自己层级更</description>
    </item>
    
    <item>
      <title>Lc16_最接近的三数之和</title>
      <link>https://zzydev.top/posts/leetcode/lc16_%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Thu, 02 Jun 2022 23:51:19 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc16_%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public: int threeSumClosest(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int res = nums[0] + nums[1] + nums[2]; sort(nums.begin(),nums.end()); for (int i = 0; i &amp;lt; nums.size() - 2; i++) { if (i &amp;amp;&amp;amp; nums[i] == nums[i - 1]) continue; for (int j = i + 1, k = nums.size() -</description>
    </item>
    
    <item>
      <title>Lc15_三数之和</title>
      <link>https://zzydev.top/posts/leetcode/lc15_%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Thu, 02 Jun 2022 23:44:04 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc15_%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; threeSum(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; sort(nums.begin(), nums.end()); int n = nums.size(); if (n &amp;lt; 3) return res; for (int i = 0; i &amp;lt; n - 2; i ++) { //-----------</description>
    </item>
    
    <item>
      <title>Lc14_最长公共前缀</title>
      <link>https://zzydev.top/posts/leetcode/lc14_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link>
      <pubDate>Thu, 02 Jun 2022 23:37:28 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc14_%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid>
      <description>语法题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public: string longestCommonPrefix(vector&amp;lt;string&amp;gt;&amp;amp; strs) { string res; if (strs.empty()) return res; for (int i = 0;; i ++ ) { if (i &amp;gt;= strs[0].size()) return res; char c = strs[0][i]; for (auto&amp;amp; str: strs) if (str.size() &amp;lt;= i || str[i] != c) return res; res +=</description>
    </item>
    
    <item>
      <title>Lc13_罗马数字转整数</title>
      <link>https://zzydev.top/posts/leetcode/lc13_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Thu, 02 Jun 2022 23:35:11 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc13_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>定义字母（罗马数字）到数字（阿拉伯数字）的映射。 从前往后扫描，如果发现 s[i+1]的数字比 s[i] 的数字大，那么减去 s[i]的值即可，否则直接累计</description>
    </item>
    
    <item>
      <title>Lc12_整数转罗马数字</title>
      <link>https://zzydev.top/posts/leetcode/lc12_%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Thu, 02 Jun 2022 23:13:10 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc12_%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</guid>
      <description>罗马数字的计数方法： 相同的数字连写，所表示的数等于这些数字相加的和，如：III=3； 较小的数字在较大的数字的右边，所表示的数等于这些数字相加</description>
    </item>
    
    <item>
      <title>Lc11_盛最多水的容器</title>
      <link>https://zzydev.top/posts/leetcode/lc11_%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 02 Jun 2022 23:10:53 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc11_%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: int maxArea(vector&amp;lt;int&amp;gt;&amp;amp; height) { int len = height.size(); int res = 0; for (int l = 0, r = len - 1; l &amp;lt; r;) { res = max(res, min(height[l], height[r]) * (r - l)); if (height[l] &amp;gt;= height[r]) r --; else if (height[l] &amp;lt; height[r]) l ++; } return res; } };</description>
    </item>
    
    <item>
      <title>Lc10_正则表达式匹配</title>
      <link>https://zzydev.top/posts/leetcode/lc10_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Thu, 02 Jun 2022 22:49:42 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc10_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>如果p[j] == &amp;lsquo;*&amp;rsquo; ，如果 表示 0 个字符，那么 f[i][j] == f[i][j - 2]，如果表示 1 个字符，那么有 f[i - 1][j - 2] &amp;amp;&amp;amp; s[i] == p[j - 1]以此类推 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Lc09_回文数</title>
      <link>https://zzydev.top/posts/leetcode/lc09_%E5%9B%9E%E6%96%87%E6%95%B0/</link>
      <pubDate>Thu, 02 Jun 2022 22:41:35 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc09_%E5%9B%9E%E6%96%87%E6%95%B0/</guid>
      <description>解法一 1 2 3 4 5 6 7 8 9 class Solution { public: bool isPalindrome(int x) { string t = to_string(x); auto res = t; reverse(t.begin(), t.end()); return res == t; } }; 解法二 如果负数直接返回 false， 比较正序逆序数字是否一样 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Lc08_字符串转换整数(aoti)</title>
      <link>https://zzydev.top/posts/leetcode/lc08_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0aoti/</link>
      <pubDate>Thu, 02 Jun 2022 22:30:37 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc08_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0aoti/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: int myAtoi(string s) { int k = 0; while (k &amp;lt; s.size() &amp;amp;&amp;amp; s[k] == &amp;#39; &amp;#39;) k ++; //去除前导空格 if (k == s.size()) return 0; int minus = 1; if (s[k] == &amp;#39;-&amp;#39;)</description>
    </item>
    
    <item>
      <title>Lc07_整数反转</title>
      <link>https://zzydev.top/posts/leetcode/lc07_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Thu, 02 Jun 2022 19:08:33 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc07_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: int reverse(int x) { int res = 0; while (x) { if (x &amp;gt; 0 &amp;amp;&amp;amp; res &amp;gt; (INT_MAX - x % 10) / 10) return 0; if (x &amp;lt; 0 &amp;amp;&amp;amp; res &amp;lt; (INT_MIN - x % 10) / 10) return 0; res = res * 10 + x % 10; x</description>
    </item>
    
    <item>
      <title>Lc06_Z字形变换</title>
      <link>https://zzydev.top/posts/leetcode/lc06_z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Thu, 02 Jun 2022 19:05:15 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc06_z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid>
      <description>题解 题目要求**假设环境不允许存储 64 位整数（有符号或无符号）**所以只能使用 int 我们要保证 res * 10 + x % 10 不越界，那么有当 x &amp;gt; 0 时， res * 10 + x %</description>
    </item>
    
    <item>
      <title>Lc05_最长回文子串</title>
      <link>https://zzydev.top/posts/leetcode/lc05_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 02 Jun 2022 18:51:39 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc05_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>暴力枚举： 首先枚举回文串的中心 i，然后分两种情况向两边扩展边界，直到遇到不同字符为止。 分两种情况讨论： 回文串长度是奇数 如：&amp;ldquo;ba</description>
    </item>
    
    <item>
      <title>Lc03_无重复字符的最长子串</title>
      <link>https://zzydev.top/posts/leetcode/lc03_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 02 Jun 2022 18:33:15 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc03_%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <description>双指针经典模板： class Solution { public: int lengthOfLongestSubstring(string s) { unordered_map&amp;lt;int, int&amp;gt; hash; int res = 0; for (int l = 0, r = 0; r &amp;lt; s.size(); r ++) { hash[s[r]] ++; while (hash[s[r]] &amp;gt; 1) hash[s[l ++]] --; if (res &amp;lt; r - l + 1) res = r - l + 1; } return res; } };</description>
    </item>
    
    <item>
      <title>Lc02_两数相加</title>
      <link>https://zzydev.top/posts/leetcode/lc02_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Thu, 02 Jun 2022 18:28:15 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc02_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>题解： 模拟加法过程： 举个 🌰：我们计算 abc + efg，我们应该先计算 c + g 如果结果大于等于 10 则进 1，然后继续计算 b + f 再加上之前的 进位 。 也就是说，</description>
    </item>
    
    <item>
      <title>2.React生命周期</title>
      <link>https://zzydev.top/posts/headfirstreact/2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Thu, 02 Jun 2022 17:58:52 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>React15的生命周期 Mounting 阶段：组件的初始化渲染（挂载） 挂载过程在组件的一生中仅会发生一次，在这个过程中，组件被初始化，然后会被渲染到真实 DOM</description>
    </item>
    
    <item>
      <title>1.JSX 是如何变成为 DOM 的</title>
      <link>https://zzydev.top/posts/headfirstreact/1_jsx%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E4%B8%BAdom%E7%9A%84/</link>
      <pubDate>Thu, 02 Jun 2022 17:23:43 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/1_jsx%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E4%B8%BAdom%E7%9A%84/</guid>
      <description>JSX 的本质：JavaScript 的语法扩展 JSX 会被编译为 React.createElement()， React.createElement() 将返回一个叫作“React Element”</description>
    </item>
    
    <item>
      <title>有手就行</title>
      <link>https://zzydev.top/posts/eight-part-essay/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C/</link>
      <pubDate>Thu, 02 Jun 2022 00:26:27 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/eight-part-essay/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C/</guid>
      <description>手写 instanceof 1 2 3 4 5 6 7 8 9 function myInstanceof(Left, Right) { if (typeof Left !== &amp;#34;object&amp;#34; || Left === null) return false; let proto = Object.getPrototypeOf(Left); while (true) { if (proto == null) return false; if (protp == Right.prototype) return true; proto = Object.getPrototypeOf(proto); } } 手写 getType 1 2 3 4 5 6 7 8 function getType(obj) { let type = typeof obj;</description>
    </item>
    
    <item>
      <title>Lc01_两数之和</title>
      <link>https://zzydev.top/posts/leetcode/lc01_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 01 Jun 2022 07:40:45 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/leetcode/lc01_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>使用 C++中的哈希表——unordered_map&amp;lt;int, int&amp;gt; 循环一遍 nums 数组，在每步循环中我们判断 target - nums[i] 是否在哈希表中 ： 如果是就找到和</description>
    </item>
    
  </channel>
</rss>
