<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>人类低质量男性求职准备</title>
    <link>https://zzydev.top/</link>
    <description>Recent content on 人类低质量男性求职准备</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 29 Jun 2023 04:37:14 +0800</lastBuildDate><atom:link href="https://zzydev.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TS基础拾遗</title>
      <link>https://zzydev.top/posts/headfirstts/ts%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/</link>
      <pubDate>Fri, 10 Jun 2022 06:19:56 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstts/ts%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/</guid>
      <description>本文只记录一些个人觉得比较容易遗忘或需要注意的点，抑或是一些跟本人接触过的其他静态语言不太一样的语法，并不是一份完整的学习教程。 &amp;nbsp;</description>
    </item>
    
    <item>
      <title>有手就行</title>
      <link>https://zzydev.top/posts/eight-part-essay/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C/</link>
      <pubDate>Thu, 02 Jun 2022 00:26:27 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/eight-part-essay/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C/</guid>
      <description>&amp;nbsp;手写 instanceof 1 2 3 4 5 6 7 8 9 function myInstanceof(Left, Right) { if (typeof Left !== &amp;#34;object&amp;#34; || Left === null) return false; let proto = Object.getPrototypeOf(Left); while (true) { if (proto == null) return false; if (proto == Right.prototype) return true; proto = Object.getPrototypeOf(proto); } } &amp;nbsp;手写 getType 1 2 3 4</description>
    </item>
    
    <item>
      <title>TS类型挑战Easy篇</title>
      <link>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98easy%E7%AF%87/</link>
      <pubDate>Fri, 24 Jun 2022 00:59:28 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98easy%E7%AF%87/</guid>
      <description>&amp;nbsp;Pick 💯Take a Challenge 实现 TS 内置的 Pick&amp;lt;T, K&amp;gt;，但不可以使用它。 从类型 T 中选择出属性 K，构造成一个新的类型。 例如： 1 2 3 4 5 6 7 8 9 10 11 12 interface Todo { title:</description>
    </item>
    
    <item>
      <title>我的拷面经（一）</title>
      <link>https://zzydev.top/posts/eight-part-essay/%E6%88%91%E7%9A%84%E6%8B%B7%E9%9D%A2%E7%BB%8F_1/</link>
      <pubDate>Wed, 08 Jun 2022 00:30:50 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/eight-part-essay/%E6%88%91%E7%9A%84%E6%8B%B7%E9%9D%A2%E7%BB%8F_1/</guid>
      <description>我是没事的时候 在无聊的时候，想的时候 到一个地方，不相同的地方 到这个地方来，来到吧 可以瞧瞧，不一样的地方 不相同的地方 很多，很多…… &amp;mdash;&amp;mdash;&amp;mdash; 淳·简·拉</description>
    </item>
    
    <item>
      <title>TS类型挑战Medium篇</title>
      <link>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98medium%E7%AF%87/</link>
      <pubDate>Fri, 24 Jun 2022 00:59:50 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98medium%E7%AF%87/</guid>
      <description>&amp;nbsp;获取函数返回类型 💯Take a Challenge 不使用 ReturnType 实现 TypeScript 的 ReturnType&amp;lt;T&amp;gt; 泛型。 例如： 1 2 3 4 5 6 const fn = (v: boolean) =&amp;gt; { if (v) return 1; else return 2; }; type a = MyReturnType&amp;lt;typeof fn&amp;gt;; // 应推导出 &amp;#34;1 | 2&amp;#34;</description>
    </item>
    
    <item>
      <title>我的拷面经（二）</title>
      <link>https://zzydev.top/posts/eight-part-essay/%E6%88%91%E7%9A%84%E6%8B%B7%E9%9D%A2%E7%BB%8F_2/</link>
      <pubDate>Wed, 08 Jun 2022 14:08:40 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/eight-part-essay/%E6%88%91%E7%9A%84%E6%8B%B7%E9%9D%A2%E7%BB%8F_2/</guid>
      <description>&amp;nbsp;根据运算优先级添加括号 现已知一个字符串是由正整数和加减乘除四个运算符(+ - * /)组成。 例如存在字符串 const str = &#39;11+2-3*4+5</description>
    </item>
    
    <item>
      <title>TS设计模式</title>
      <link>https://zzydev.top/posts/headfirstts/ts%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 29 Jun 2023 04:37:14 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstts/ts%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>工厂模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 interface IProduct { name: string; fn1: () =&amp;gt; void; fn2: () =&amp;gt; void; } class Product1 implements IProduct { constructor(public name: string) {} fn1() { console.log(&amp;#34;product1&amp;#34;); } fn2()</description>
    </item>
    
    <item>
      <title>Vite初探</title>
      <link>https://zzydev.top/posts/frontendengineering/vite%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Thu, 23 Mar 2023 00:09:46 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/frontendengineering/vite%E5%88%9D%E6%8E%A2/</guid>
      <description>大概是一份不完整的 Vite 备忘录 no-bundle 是什么 no-bundle 理念：利用浏览器原生 ES 模块的支持，实现开发阶段的 Dev Server，进行模块的按需加载，而不是先整体打包再进</description>
    </item>
    
    <item>
      <title>重学包管理工具</title>
      <link>https://zzydev.top/posts/frontendengineering/%E9%87%8D%E5%AD%A6%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 21 Mar 2023 02:35:47 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/frontendengineering/%E9%87%8D%E5%AD%A6%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>npm 安装机制 npm 安装流程 npm 配置的优先级 命令行设置 npm 配置 &amp;gt; env 环境变量设置 npm 配置 &amp;gt; 项目级的 .npmrc 文件 &amp;gt; 用户级的 .npmrc 文件&amp;gt; 全局级的 .npmrc 文件 &amp;gt; npm 内置的 .npmrc 文</description>
    </item>
    
    <item>
      <title>故意不小心的面试题_02</title>
      <link>https://zzydev.top/posts/eight-part-essay/%E6%95%85%E6%84%8F%E4%B8%8D%E5%B0%8F%E5%BF%83%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98_02/</link>
      <pubDate>Sun, 19 Mar 2023 23:07:03 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/eight-part-essay/%E6%95%85%E6%84%8F%E4%B8%8D%E5%B0%8F%E5%BF%83%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98_02/</guid>
      <description>// todo 等待面试实战完补上</description>
    </item>
    
    <item>
      <title>故意不小心的面试题_01</title>
      <link>https://zzydev.top/posts/eight-part-essay/%E6%95%85%E6%84%8F%E4%B8%8D%E5%B0%8F%E5%BF%83%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98_01/</link>
      <pubDate>Fri, 03 Mar 2023 01:02:40 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/eight-part-essay/%E6%95%85%E6%84%8F%E4%B8%8D%E5%B0%8F%E5%BF%83%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98_01/</guid>
      <description>// todo 等待面试实战完补上</description>
    </item>
    
    <item>
      <title>前端工程化</title>
      <link>https://zzydev.top/posts/frontendengineering/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 30 Jun 2022 22:10:58 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/frontendengineering/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/</guid>
      <description>实现一个前端脚手架 todo</description>
    </item>
    
    <item>
      <title>Jest与前端自动化测试</title>
      <link>https://zzydev.top/posts/frontendengineering/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 29 Jun 2022 09:42:08 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/frontendengineering/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</guid>
      <description>Jest 的简易原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function expect(result) { return { toBe: function (actual) { if (result !== actual) { throw new Error(`expected ${actual} but got ${result}`); } }, }; } function test(desc, fn) { try { fn(); console.log(`${desc} - passed`); } catch (e) { console.log(`${desc} - failed: ${e.message}`); } } Jest</description>
    </item>
    
    <item>
      <title>TS类型挑战Extreme篇</title>
      <link>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98extreme%E7%AF%87/</link>
      <pubDate>Fri, 24 Jun 2022 01:00:33 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98extreme%E7%AF%87/</guid>
      <description>//todo</description>
    </item>
    
    <item>
      <title>TS类型挑战Hard篇</title>
      <link>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98hard%E7%AF%87/</link>
      <pubDate>Fri, 24 Jun 2022 01:00:14 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstts/ts%E7%B1%BB%E5%9E%8B%E6%8C%91%E6%88%98hard%E7%AF%87/</guid>
      <description>//todo</description>
    </item>
    
    <item>
      <title>Node基础</title>
      <link>https://zzydev.top/posts/node_deno/node%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 20 Jun 2022 14:50:48 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/node_deno/node%E5%9F%BA%E7%A1%80/</guid>
      <description>node 基础概念 todo</description>
    </item>
    
    <item>
      <title>1_初见Babel</title>
      <link>https://zzydev.top/posts/headfirstbabel/1_%E5%88%9D%E8%A7%81babel/</link>
      <pubDate>Tue, 07 Jun 2022 21:10:28 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstbabel/1_%E5%88%9D%E8%A7%81babel/</guid>
      <description>什么是 Babel babel 🐠 Babel is a compiler for writing next generation JavaScript. typescript babel 是什么 babel 的编译流程 &amp;nbsp;parse parse 阶段的目的是把源码字符串转换成机器能够理解的抽象语法树(AST)，这个过程分为词法分</description>
    </item>
    
    <item>
      <title>9.如何理解Fiber架构的迭代动机与设计思想</title>
      <link>https://zzydev.top/posts/headfirstreact/9_%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3fiber%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%8A%A8%E6%9C%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link>
      <pubDate>Mon, 06 Jun 2022 19:15:48 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/9_%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3fiber%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%8A%A8%E6%9C%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</guid>
      <description>前置知识：单线程的 JavaScript 与多线程的浏览器 JavaScript 线程和渲染线程必须是互斥的：这两个线程不能够穿插执行，必须串行。当其中一个线程执行时，另一个线程只能挂</description>
    </item>
    
    <item>
      <title>8.SetState是同步的还是异步的？</title>
      <link>https://zzydev.top/posts/headfirstreact/8_setstate%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 21:12:17 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/8_setstate%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84/</guid>
      <description>从一道面试题说起 其他 setState 原理的文章 本文的 online Demo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49</description>
    </item>
    
    <item>
      <title>7.React中的栈调和过程是怎样的？</title>
      <link>https://zzydev.top/posts/headfirstreact/7_react%E4%B8%AD%E7%9A%84%E6%A0%88%E8%B0%83%E5%92%8C%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 20:18:38 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/7_react%E4%B8%AD%E7%9A%84%E6%A0%88%E8%B0%83%E5%92%8C%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84/</guid>
      <description>调和（Reconciliation）过程与 Diff 算法 Virtual DOM 是一种编程概念。在这个概念里，UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中</description>
    </item>
    
    <item>
      <title>6.React是为了更好的性能选择虚拟DOM吗</title>
      <link>https://zzydev.top/posts/headfirstreact/6_%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9Fdomreact%E9%80%89%E5%AE%83%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%80%A7%E8%83%BD%E5%90%97/</link>
      <pubDate>Fri, 03 Jun 2022 19:55:46 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/6_%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9Fdomreact%E9%80%89%E5%AE%83%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%80%A7%E8%83%BD%E5%90%97/</guid>
      <description>React 中的虚拟 DOM 大致是如何工作的? 挂载阶段，React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射（触发渲染流水线）； 更新</description>
    </item>
    
    <item>
      <title>5.深入React Hooks工作机制,Hooks本质是链表</title>
      <link>https://zzydev.top/posts/headfirstreact/5_%E6%B7%B1%E5%85%A5react-hooks%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 03 Jun 2022 17:34:48 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/5_%E6%B7%B1%E5%85%A5react-hooks%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</guid>
      <description>React 团队面向开发者给出了两条 React-Hooks 的使用原则，原则的内容如下： 只在 React 函数中调用 Hooks； 不要在循环、条件或嵌套函数中调用 Hooks。 原则 2 中强调</description>
    </item>
    
    <item>
      <title>4.React Hooks设计动机与工作模式</title>
      <link>https://zzydev.top/posts/headfirstreact/4_react-hooks%E8%AE%BE%E8%AE%A1%E5%8A%A8%E6%9C%BA%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 03 Jun 2022 11:16:41 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/4_react-hooks%E8%AE%BE%E8%AE%A1%E5%8A%A8%E6%9C%BA%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</guid>
      <description>函数组件会捕获 render 内部的状态，这是两类组件最大的不同。 React 框架的主要工作，就是及时地把声明式的代码转换为命令式的 DOM 操作，把数据层面的描述映射到用</description>
    </item>
    
    <item>
      <title>3.数据是如何在React组件之间流动的？</title>
      <link>https://zzydev.top/posts/headfirstreact/3_%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8react%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E6%B5%81%E5%8A%A8%E7%9A%84/</link>
      <pubDate>Fri, 03 Jun 2022 10:35:11 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/3_%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8react%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E6%B5%81%E5%8A%A8%E7%9A%84/</guid>
      <description>React 的核心特征是“数据驱动视图”，即 UI = render(data) 基于 props 的单向数据流 所谓单向数据流，指的就是当前组件的 state 以 props 的形式流动时，只能流向组件树中比自己层级更</description>
    </item>
    
    <item>
      <title>2.React生命周期</title>
      <link>https://zzydev.top/posts/headfirstreact/2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Thu, 02 Jun 2022 17:58:52 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>React15 的生命周期 Mounting 阶段：组件的初始化渲染 挂载过程在组件的一生中仅会发生一次，在这个过程中，组件被初始化，然后会被渲染到真实 DOM 里，完成“首次渲染”</description>
    </item>
    
    <item>
      <title>1.JSX 是如何变成为 DOM 的</title>
      <link>https://zzydev.top/posts/headfirstreact/1_jsx%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E4%B8%BAdom%E7%9A%84/</link>
      <pubDate>Thu, 02 Jun 2022 17:23:43 +0800</pubDate>
      
      <guid>https://zzydev.top/posts/headfirstreact/1_jsx%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E4%B8%BAdom%E7%9A%84/</guid>
      <description>JSX 的本质：JavaScript 的语法糖 JSX 会被编译为 React.createElement()， React.createElement() 将返回一个叫作“React Element”的</description>
    </item>
    
  </channel>
</rss>
